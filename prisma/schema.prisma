// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  name        String
  email       String    @unique
  password    String?
  phone       String?
  thumbnailId String?   @map("thumbnail_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(3)
  cityId      String    @map("city_id")

  Firebase                       Firebase?
  City                           City                  @relation(fields: [cityId], references: [code])
  Resource                       Resource?             @relation(fields: [thumbnailId], references: [id])
  ProjectCollaborations          ProjectCollaborator[] @relation(name: "UserProjectCollaborator")
  AddedProjectCollaborations     ProjectCollaborator[] @relation(name: "AddedByProjectCollaborator")
  UserProjectAdmins              ProjectAdmin[]        @relation(name: "UserProjectAdmin")
  AddedByProjectAdmins           ProjectAdmin[]        @relation(name: "AddedByProjectAdmin")
  TaskCreatedByUsers             Task[]                @relation(name: "TaskCreatedByUser")
  TaskEditedByUsers              Task[]                @relation(name: "TaskEditedByUser")
  AuthTokens                     AuthToken[]
  TaskAssignees                  TaskAssignee[]
  Comments                       Comment[]
  Chats                          Chat[]
  ChatDeleteds                   ChatDeleted[]
  ChatRoomPrivates               ChatRoomPrivate[]
  UserOrganizationMembers        OrganizationMember[]  @relation(name: "UserOrganization")
  AddedByUserOrganizationMembers OrganizationMember[]  @relation(name: "AddedByUser")
  UserOrganizationAdmins         OrganizationAdmin[]   @relation(name: "UserOrganizationAdmin")
  AddedByUserOrganizationAdmins  OrganizationAdmin[]   @relation(name: "AddedByUserOrganizationAdmin")
  Notifications                  Notification[]
  UserResetTokens                UserResetToken[]
  Organization                   Organization[]
  Project                        Project[]
  Tag                            Tag[]
  UserDevice                     UserDevice[]
  Note                           Note[]
  EventLog                       EventLog[]
  Log                            Log[]

  @@map("user")
}

model Firebase {
  id         String  @id @default(uuid())
  firebaseId String  @unique @map("firebase_id")
  name       String?
  email      String?
  phone      String?
  photoUrl   String? @map("photo_url")
  userId     String  @unique @map("user_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  User User @relation(fields: [userId], references: [id])

  @@map("firebase")
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String
  password  String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  AuthTokenAdmins AuthTokenAdmin[]

  @@map("admin")
}

model AuthToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String
  deviceId  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Device Device @relation(fields: [deviceId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  @@map("auth_token")
}

model AuthTokenAdmin {
  id        String    @id @default(uuid())
  adminId   String    @map("user_id")
  token     String
  deviceId  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Device DeviceAdmin @relation(fields: [deviceId], references: [id])
  Admin  Admin       @relation(fields: [adminId], references: [id])

  @@map("auth_token_admin")
}

model UserResetToken {
  id        String    @id
  userId    String
  usedAt    DateTime? @map("used_at") @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id])

  @@map("user_reset_token")
}

model DeviceAdmin {
  id               String      @id @default(uuid())
  platform         PlaformEnum
  platformUniqueId String      @map("plaform_unique_id")
  metadata         Json
  deviceToken      String      @map("device_token")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime    @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt        DateTime?   @map("deleted_at") @db.Timestamptz(3)
  lastActivity     DateTime    @map("last_activity") @db.Timestamptz(3)

  AuthTokenAdmins AuthTokenAdmin[]

  @@map("device_admin")
}

model Device {
  id                 String    @id @default(uuid())
  fingerprint        String
  fcmToken           String?
  fcmTokenLastUpdate DateTime? @db.Timestamptz(3)
  lastActive         DateTime  @default(now()) @db.Timestamptz(3)
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz(3)

  AuthTokens AuthToken[]
  UserDevice UserDevice[]

  @@map("device")
}

model UserDevice {
  id        String   @id @default(uuid())
  deviceId  String   @map("device_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  User      User     @relation(fields: [userId], references: [id])
  Device    Device   @relation(fields: [deviceId], references: [id])

  @@map("user_device")
}

model Notification {
  id        Int       @id @default(autoincrement())
  scope     String
  fcm       Json
  data      Json
  userId    String    @map("user_id")
  readAt    DateTime? @map("read_at") @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  User User @relation(fields: [userId], references: [id])

  @@map("notification")
}

enum PlaformEnum {
  WEB     @map("web")
  ANDROID @map("android")
  IOS     @map("ios")
}

model Resource {
  id        String    @id @default(uuid())
  objectUrl String?   @map("object_url")
  objectKey String    @unique @map("object_key")
  fileName  String    @map("file_name")
  fileType  String    @map("file_type")
  fileSize  Int       @map("file_size")
  metadata  Json?     @map("meta_data")
  blurHash  String?   @map("blur_hash")
  relatedId String?   @map("related_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  parentResource Resource?      @relation("ChildResources", fields: [relatedId], references: [id])
  childResources Resource[]     @relation("ChildResources")
  ProjectImages  ProjectImage[]
  ProjectFiles   ProjectFile[]
  TaskFiles      TaskFile[]
  TaskImages     TaskImage[]
  ChatResources  ChatResource[]
  Organization   Organization?
  Project        Project[]
  User           User[]

  @@map("resource")
}

// Project

enum ProjectStatus {
  NEW
  IN_PROGRESS
  POSTPONED
  WAITING_APPROVAL
  DONE
  CANCELLED
}

model Project {
  id               String        @id @default(uuid())
  color            String?
  name             String
  description      String?
  lastChatActivity DateTime?     @map("last_chat_activity") @db.Timestamptz(3)
  priority         String
  target           String?
  budget           Int?
  goals            String?
  status           ProjectStatus
  creatorId        String        @map("creator_id")
  thumbnailId      String?       @map("thumbnail_id")
  lastChatId       String?       @unique @map("last_chat_id")
  organizationId   String?       @map("organization_id")
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt        DateTime?     @map("deleted_at") @db.Timestamptz(3)

  LastChat             Chat?                 @relation(fields: [lastChatId], references: [id])
  User                 User                  @relation(fields: [creatorId], references: [id])
  Organization         Organization?         @relation(fields: [organizationId], references: [id])
  Resource             Resource?             @relation(fields: [thumbnailId], references: [id])
  ProjectTags          ProjectTag[]
  ProjectCollaborators ProjectCollaborator[]
  ProjectAdmins        ProjectAdmin[]
  ProjectImages        ProjectImage[]
  ProjectFiles         ProjectFile[]
  Tasks                Task[]
  NoteProjects         NoteProject[]
  ChatRoomProjects     ChatRoomProject[]
  EventLogs            EventLog[]
  Log                  Log[]

  @@map("project")
}

model ProjectTag {
  tagId     String   @map("tag_id")
  projectId String   @unique @map("project_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Project Project @relation(fields: [projectId], references: [id])
  Tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([tagId, projectId])
  @@map("project_tag")
}

model Tag {
  id             String    @id @default(uuid())
  name           String
  organizationId String?   @map("organization_id")
  creatorId      String    @map("creator_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(3)

  ProjectTags  ProjectTag[]
  Creator      User          @relation(fields: [creatorId], references: [id])
  Organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("tag")
}

model ProjectCollaborator {
  projectId String    @map("project_id")
  userId    String    @map("user_id")
  addedById String    @map("added_by_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project Project @relation(fields: [projectId], references: [id])
  User    User    @relation(name: "UserProjectCollaborator", fields: [userId], references: [id])
  Addedby User    @relation(name: "AddedByProjectCollaborator", fields: [addedById], references: [id])

  @@id([projectId, userId])
  @@map("project_collaborator")
}

model ProjectAdmin {
  projectId String    @map("project_id")
  userId    String    @map("user_id")
  addedById String    @map("added_by_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project Project @relation(fields: [projectId], references: [id])
  User    User    @relation(name: "UserProjectAdmin", fields: [userId], references: [id])
  Addedby User    @relation(name: "AddedByProjectAdmin", fields: [addedById], references: [id])

  @@id([projectId, userId])
  @@map("project_admin")
}

model ProjectImage {
  projectId  String    @map("project_id")
  resourceId String    @map("resource_id")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project  Project  @relation(fields: [projectId], references: [id])
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@id([projectId, resourceId])
  @@map("project_image")
}

model ProjectFile {
  projectId  String    @map("project_id")
  resourceId String    @map("resource_id")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project  Project  @relation(fields: [projectId], references: [id])
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@id([projectId, resourceId])
  @@map("project_file")
}

model EventLog {
  id              String    @id @default(uuid())
  date            DateTime  @db.Timestamptz(3)
  description     String?
  lastUpdatedById String?   @map("last_updated_by_id")
  projectId       String    @map("project_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project Project @relation(fields: [projectId], references: [id])
  User    User?   @relation(fields: [lastUpdatedById], references: [id])

  @@map("event_log")
}

enum TaskEnum {
  NEW
  IN_PROGRESS
  POSTPONED
  WAITING_APPROVAL
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW    @map("0")
  MEDIUM @map("1")
  HIGH   @map("2")
}

model Task {
  id             String       @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime?    @map("start_date") @db.Date
  endDate        DateTime?    @map("end_date") @db.Date
  status         TaskEnum
  priority       TaskPriority
  color          String?
  duration       Int?
  projectId      String?      @map("project_id")
  createdById    String       @map("creator_id")
  doneById       String?      @map("done_by_id")
  doneAt         DateTime?    @map("done_at")
  editedById     String?      @map("edited_by_id")
  organizationId String?      @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz(3)

  Project         Project?         @relation(fields: [projectId], references: [id])
  CreatedBy       User             @relation(name: "TaskCreatedByUser", fields: [createdById], references: [id])
  EditedBy        User?            @relation(name: "TaskEditedByUser", fields: [editedById], references: [id])
  Organization    Organization?    @relation(fields: [organizationId], references: [id])
  TaskComments    TaskComment[]
  TaskFiles       TaskFile[]
  TaskAssignees   TaskAssignee[]
  TaskPrequisites TaskPrequisite[] @relation(name: "TaskPrequisite")
  TaskParents     TaskPrequisite[] @relation(name: "TaskParent")
  TaskImages      TaskImage[]
  ReminderTasks   ReminderTask?

  @@map("task")
}

model TaskComment {
  taskId    String   @map("task_id")
  commentId String   @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Task    Task    @relation(fields: [taskId], references: [id])
  Comment Comment @relation(fields: [commentId], references: [id])

  @@id([taskId, commentId])
  @@map("task_comment")
}

model TaskFile {
  taskId     String   @map("task_id")
  resourceId String   @map("resource_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Task     Task     @relation(fields: [taskId], references: [id])
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@id([taskId, resourceId])
  @@map("task_file")
}

model TaskAssignee {
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Task Task @relation(fields: [taskId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@id([taskId, userId])
  @@map("task_assignee")
}

model TaskPrequisite {
  taskId           String   @map("task_id")
  taskPrequisiteId String   @map("task_prequisite_id")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  TaskParent     Task @relation(name: "TaskParent", fields: [taskId], references: [id])
  TaskPrequisite Task @relation(name: "TaskPrequisite", fields: [taskPrequisiteId], references: [id])

  @@id([taskId, taskPrequisiteId])
  @@map("task_prequisite")
}

model TaskImage {
  taskId     String   @map("task_id")
  resourceId String   @map("resource_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Task     Task     @relation(fields: [taskId], references: [id])
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@id([taskId, resourceId])
  @@map("task_image")
}

// Note

model Note {
  id                String             @id @default(uuid())
  title             String
  description       String?
  creatorId         String             @map("user_id")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime           @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt         DateTime?          @map("deleted_at") @db.Timestamptz(3)
  User              User               @relation(fields: [creatorId], references: [id])
  NoteProjects      NoteProject[]
  NoteOrganizations NoteOrganization[]
  ReminderNotes     ReminderNote?

  @@map("note")
}

model NoteProject {
  projectId String   @map("project_id")
  noteId    String   @map("note_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Project Project @relation(fields: [projectId], references: [id])
  Note    Note    @relation(fields: [noteId], references: [id])

  @@id([projectId, noteId])
  @@map("note_project")
}

model NoteOrganization {
  organizationId String   @map("organization_id")
  noteId         String   @map("note_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Organization Organization @relation(fields: [organizationId], references: [id])
  Note         Note         @relation(fields: [noteId], references: [id])

  @@id([organizationId, noteId])
  @@map("note_organization")
}

// Comment

model Comment {
  id                 String    @id @default(uuid())
  content            String
  authorId           String    @map("author_id")
  referenceCommentId String?   @map("reference_comment_id")
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz(3)

  TaskComment TaskComment[]

  Author        User      @relation(fields: [authorId], references: [id])
  ParentComment Comment?  @relation(name: "ReferenceComments", fields: [referenceCommentId], references: [id])
  ChildComments Comment[] @relation(name: "ReferenceComments")

  @@map("comment")
}

// Reminder

enum IntervalReminder {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

model Reminder {
  id                 String           @id @default(uuid())
  dateReminder       DateTime         @map("date_reminder") @db.Date
  timeReminder       DateTime         @map("time_reminder") @db.Time()
  interval           IntervalReminder
  alarm              Boolean          @default(false)
  previousInvocation DateTime?        @db.Timestamptz(3)
  nextInvocation     DateTime         @db.Timestamptz(3)
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime         @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt          DateTime?        @map("deleted_at") @db.Timestamptz(3)
  ReminderTasks      ReminderTask[]
  ReminderNotes      ReminderNote[]

  @@map("reminder")
}

model ReminderTask {
  reminderId String   @unique @map("reminder_id")
  taskId     String   @unique @map("task_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  Reminder   Reminder @relation(fields: [reminderId], references: [id])
  Task       Task     @relation(fields: [taskId], references: [id])

  @@id([reminderId, taskId])
  @@map("reminder_task")
}

model ReminderNote {
  reminderId String   @unique @map("reminder_id")
  noteId     String   @unique @map("note_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  Reminder   Reminder @relation(fields: [reminderId], references: [id])
  Note       Note     @relation(fields: [noteId], references: [id])

  @@id([reminderId, noteId])
  @@map("reminder_note")
}

// Chat

model Chat {
  id              String    @id @default(uuid())
  content         String
  chatRoomId      String    @map("chat_room_id")
  authorId        String    @map("author_id")
  referenceChatId String    @map("reference_chat_id")
  info            Json      @db.JsonB
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz(3)

  Project          Project?
  Author           User              @relation(fields: [authorId], references: [id])
  ChatRoom         ChatRoom          @relation(name: "ChatRoom", fields: [chatRoomId], references: [id])
  ParentChat       Chat              @relation(name: "ChildChat", fields: [referenceChatId], references: [id])
  ChildChats       Chat[]            @relation(name: "ChildChat")
  LastChat         ChatRoom?
  ChatDeleteds     ChatDeleted[]
  ChatResources    ChatResource[]
  ChatRoomProjects ChatRoomProject[]
  ChatRoomPrivates ChatRoomPrivate[]

  @@map("chat")
}

enum ChatType {
  PROJECT
  PRIVATE
}

model ChatRoom {
  id               String    @id @default(uuid())
  type             ChatType
  lastChatId       String    @unique @map("last_chat_id")
  lastChatActivity DateTime  @map("last_chat_activity") @db.Timestamptz(3)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz(3)

  Chat     Chat[] @relation(name: "ChatRoom")
  LastChat Chat   @relation(fields: [lastChatId], references: [id])

  @@map("chat_room")
}

model ChatDeleted {
  chatId      String   @id @default(uuid())
  deletedById String   @map("deleted_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Chat      Chat @relation(fields: [chatId], references: [id])
  DeletedBy User @relation(fields: [deletedById], references: [id])

  @@map("chat_deleted")
}

model ChatResource {
  chatId     String   @map("chat_id")
  resourceId String   @map("resource_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Chat     Chat     @relation(fields: [chatId], references: [id])
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@id([chatId, resourceId])
  @@map("chat_resource")
}

model ChatRoomProject {
  chatId    String   @map("chat_id")
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Chat    Chat    @relation(fields: [chatId], references: [id])
  Project Project @relation(fields: [projectId], references: [id])

  @@id([chatId, projectId])
  @@map("chat_project")
}

model ChatRoomPrivate {
  chatId    String   @map("chat_id")
  userId    String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  Chat Chat @relation(fields: [chatId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
  @@map("chat_room_private")
}

// Organization

model Organization {
  id          String    @id @default(uuid())
  name        String
  description String?
  thumbnailId String?   @unique @map("thumbnail_id")
  creatorId   String    @map("creator_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(3)

  Tasks               Task[]
  NoteOrganizations   NoteOrganization[]
  OrganizationMembers OrganizationMember[]
  Departemens         Departement[]
  Resource            Resource?            @relation(fields: [thumbnailId], references: [id])
  Creator             User                 @relation(fields: [creatorId], references: [id])
  Project             Project[]
  OrganizationAdmin   OrganizationAdmin[]
  Tag                 Tag[]
  Log                 Log[]

  @@map("organization")
}

model OrganizationMember {
  organizationId String   @map("organization_id")
  userId         String   @map("user_id")
  addedById      String   @map("added_by_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  Organization Organization @relation(fields: [organizationId], references: [id])
  User         User         @relation(name: "UserOrganization", fields: [userId], references: [id])
  AddedBy      User         @relation(name: "AddedByUser", fields: [addedById], references: [id])

  @@id([organizationId, userId])
  @@map("organization_member")
}

model OrganizationAdmin {
  organizationId String   @map("organization_id")
  userId         String   @map("user_id")
  addedById      String   @map("added_by_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  Organization Organization @relation(fields: [organizationId], references: [id])
  User         User         @relation(name: "UserOrganizationAdmin", fields: [userId], references: [id])
  AddedBy      User         @relation(name: "AddedByUserOrganizationAdmin", fields: [addedById], references: [id])

  @@id([organizationId, userId])
  @@map("organization_admin")
}

model Departement {
  id             String    @id @default(uuid())
  name           String
  description    String?
  organizationId String    @map("organization_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(3)

  Organization Organization @relation(fields: [organizationId], references: [id])
  Position     Position[]

  @@map("departement")
}

model Position {
  id            String    @id @default(uuid())
  departementId String    @map("departement_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz(3)

  Departement Departement @relation(fields: [departementId], references: [id])
  Job         Job[]

  @@map("position")
}

model Job {
  id          String    @id @default(uuid())
  name        String
  sequence    String?
  description String?
  category    Json?
  positionId  String    @map("position_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(3)

  Position Position @relation(fields: [positionId], references: [id])
  Sop      Sop?

  @@map("job")
}

model Sop {
  id        String    @id @default(uuid())
  job_id    String    @unique @map("job_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  Job Job @relation(fields: [job_id], references: [id])

  @@map("sop")
}

enum MethodEnum {
  CREATE
  UPDATE
  DELETE
}

model Log {
  id             String      @id @default(uuid())
  context        String?
  method         MethodEnum?
  level          Int         @db.SmallInt
  data           Json        @db.JsonB() // message
  info           Json?       @db.JsonB() // oldvalue newvalue
  timestamp      DateTime    @default(now()) @db.Timestamptz(4)
  userId         String?      @map("user_id")
  organizationId String?     @map("organization_id")
  projectId      String?     @map("project_id")

  User         User?          @relation(fields: [userId], references: [id])
  Project      Project?      @relation(fields: [projectId], references: [id])
  Organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([timestamp])
  @@map("log")
}

model City {
  code         String  @id @unique
  name         String
  provinceCode String  @map("province_code")
  latitude     String?
  longitude    String?

  province  Province   @relation(fields: [provinceCode], references: [code])
  districts District[]
  User      User[]

  @@map("cities")
}

model Province {
  code      String  @id @unique
  name      String
  latitude  String?
  longitude String?
  cities    City[]

  @@map("provinces")
}

model District {
  code      String  @id @unique
  name      String
  cityCode  String  @map("city_code")
  latitude  String?
  longitude String?

  city         City          @relation(fields: [cityCode], references: [code])
  subdistricts SubDistrict[]

  @@map("indonesia_districts")
}

model SubDistrict {
  code         String  @id @unique
  name         String
  districtCode String
  latitude     String?
  longitude    String?

  district District @relation(fields: [districtCode], references: [code])

  @@map("indonesia_subdistricts")
}
